// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: events.sql

package db

import (
	"context"

	"github.com/gofrs/uuid"
)

const addEventToStream = `-- name: AddEventToStream :one
insert into events (stream_id, idempotency_key, version, payload)
values ($1, $2, $3, $4)
returning event_id, stream_id, idempotency_key, recorded_at, version, payload
`

type AddEventToStreamParams struct {
	StreamID       uuid.UUID
	IdempotencyKey uuid.UUID
	Version        int64
	Payload        []byte
}

func (q *Queries) AddEventToStream(ctx context.Context, arg AddEventToStreamParams) (Event, error) {
	row := q.db.QueryRow(ctx, addEventToStream,
		arg.StreamID,
		arg.IdempotencyKey,
		arg.Version,
		arg.Payload,
	)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.StreamID,
		&i.IdempotencyKey,
		&i.RecordedAt,
		&i.Version,
		&i.Payload,
	)
	return i, err
}

const createStream = `-- name: CreateStream :one
insert into streams (stream_id, latest_version, idempotency_key)
values ($1, 0, $2)
returning stream_id, idempotency_key, latest_version
`

type CreateStreamParams struct {
	StreamID       uuid.UUID
	IdempotencyKey uuid.UUID
}

func (q *Queries) CreateStream(ctx context.Context, arg CreateStreamParams) (Stream, error) {
	row := q.db.QueryRow(ctx, createStream, arg.StreamID, arg.IdempotencyKey)
	var i Stream
	err := row.Scan(&i.StreamID, &i.IdempotencyKey, &i.LatestVersion)
	return i, err
}

const getEventsForStream = `-- name: GetEventsForStream :many
select event_id, stream_id, idempotency_key, recorded_at, version, payload
from events
where stream_id = $1
order by version asc
`

func (q *Queries) GetEventsForStream(ctx context.Context, streamID uuid.UUID) ([]Event, error) {
	rows, err := q.db.Query(ctx, getEventsForStream, streamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.StreamID,
			&i.IdempotencyKey,
			&i.RecordedAt,
			&i.Version,
			&i.Payload,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStream = `-- name: GetStream :one
select stream_id, idempotency_key, latest_version
from streams
where stream_id = $1
`

func (q *Queries) GetStream(ctx context.Context, streamID uuid.UUID) (Stream, error) {
	row := q.db.QueryRow(ctx, getStream, streamID)
	var i Stream
	err := row.Scan(&i.StreamID, &i.IdempotencyKey, &i.LatestVersion)
	return i, err
}

const incrementStreamVersion = `-- name: IncrementStreamVersion :one
update streams
set latest_version = latest_version + 1
where stream_id = $1
    and latest_version = $2
returning stream_id, idempotency_key, latest_version
`

type IncrementStreamVersionParams struct {
	StreamID        uuid.UUID
	ExpectedVersion int64
}

func (q *Queries) IncrementStreamVersion(ctx context.Context, arg IncrementStreamVersionParams) (Stream, error) {
	row := q.db.QueryRow(ctx, incrementStreamVersion, arg.StreamID, arg.ExpectedVersion)
	var i Stream
	err := row.Scan(&i.StreamID, &i.IdempotencyKey, &i.LatestVersion)
	return i, err
}
